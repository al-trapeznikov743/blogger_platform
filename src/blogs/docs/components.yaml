components:
  schemas:
    Int32Type:
      type: integer
      format: int32
      example: 0

    Id:
      type: string
      description: Identifier

    Name:
      type: string
      description: Name
      maxLength: 15

    Description:
      type: string
      description: Description
      maxLength: 500

    Url:
      type: string
      description: Url address
      pattern: '^https://([a-zA-Z0-9_-]+\.)+[a-zA-Z0-9_-]+(\/[a-zA-Z0-9_-]+)*\/?$'
      maxLength: 100
      example: https://www.google.com/

    CreatedAt:
      type: string
      format: date-time
      description: Creation date

    IsMembership:
      type: boolean
      description: True if user has not expired membership subscription to blog

    Title:
      type: string
      description: Title post
      maxLength: 30

    ShortDescription:
      type: string
      description: Description post
      maxLength: 100

    Content:
      type: string
      description: Content post
      maxLength: 1000

    BlogInputModel:
      type: object
      description: Fields for create and update blog
      required:
        - name
        - description
        - websiteUrl
      properties:
        name:
          $ref: '#/components/schemas/Name'
        description:
          $ref: '#/components/schemas/Description'
        websiteUrl:
          $ref: '#/components/schemas/Url'

    BlogViewModel:
      type: object
      description: Returned blog fields
      required:
        - id
        - name
        - description
        - websiteUrl
      properties:
        id:
          $ref: '#/components/schemas/Id'
        name:
          $ref: '#/components/schemas/Name'
        description:
          $ref: '#/components/schemas/Description'
        websiteUrl:
          $ref: '#/components/schemas/Url'
        createdAt:
          $ref: '#/components/schemas/CreatedAt'
        isMembership:
          $ref: '#/components/schemas/IsMembership'

    PagedBlogViewModel:
      type: object
      required:
        - items
      properties:
        pagesCount:
          $ref: '#/components/schemas/Int32Type'
          description: Total number of pages
        page:
          $ref: '#/components/schemas/Int32Type'
          description: Current page number
        pageSize:
          $ref: '#/components/schemas/Int32Type'
          description: Number of items returned per page
        totalCount:
          $ref: '#/components/schemas/Int32Type'
          description: Total number of items matching the query
        items:
          type: array
          items:
            $ref: '#/components/schemas/BlogViewModel'

    PagedPostViewModel:
      type: object
      required:
        - items
      properties:
        pagesCount:
          $ref: '#/components/schemas/Int32Type'
          description: Total number of pages
        page:
          $ref: '#/components/schemas/Int32Type'
          description: Current page number
        pageSize:
          $ref: '#/components/schemas/Int32Type'
          description: Number of items returned per page
        totalCount:
          $ref: '#/components/schemas/Int32Type'
          description: Total number of items matching the query
        items:
          type: array
          items:
            $ref: '../../posts/docs/components.yaml#/components/schemas/PostViewModel'

    PostForBlogInputModel:
      type: object
      description: Fields for create a new post for blog
      required:
        - title
        - shortDescription
        - content
      properties:
        title:
          $ref: '#/components/schemas/Title'
        shortDescription:
          $ref: '#/components/schemas/ShortDescription'
        content:
          $ref: '#/components/schemas/Content'

    ValidationError:
      type: object
      properties:
        field:
          type: string
          example: 'name'
        message:
          type: string
          example: 'Invalid name'

    ValidationErrorResponse:
      type: object
      properties:
        errorsMessages:
          type: array
          items:
            $ref: '#/components/schemas/ValidationError'
